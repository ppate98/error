1. Kth Largest Element in an Array
cpp
Copy code
#include <queue>
#include <vector>

using namespace std;

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq; // Min-heap to store the k largest elements
        
        for (int num : nums) {
            pq.push(num);
            if (pq.size() > k) {
                pq.pop(); // Remove the smallest element if the heap exceeds size k
            }
        }
        
        return pq.top(); // The root of the min-heap will be the k-th largest element
    }
};
Time Complexity: O(n log k)
Space Complexity: O(k)

2. Kth Largest Element in a Stream
cpp
Copy code
#include <queue>
#include <vector>

using namespace std;

class KthLargest {
private:
    priority_queue<int, vector<int>, greater<int>> pq; // Min-heap
    int k;

public:
    KthLargest(int k, vector<int>& nums) {
        this->k = k;
        
        for (int num : nums) {
            add(num);
        }
    }
    
    int add(int val) {
        if (pq.size() < k) {
            pq.push(val);
        } else if (val > pq.top()) {
            pq.pop();
            pq.push(val);
        }
        
        return pq.top(); // The root of the min-heap is the k-th largest element
    }
};
Time Complexity:

Constructor: O(n log k) where n is the number of elements in the nums array.
add() method: O(log k) for each insert and removal.
Space Complexity: O(k)

3. Find Median from Data Stream
cpp
Copy code
#include <queue>

using namespace std;

class MedianFinder {
private:
    priority_queue<int> maxHeap; // Max-heap to store the smaller half of the numbers
    priority_queue<int, vector<int>, greater<int>> minHeap; // Min-heap to store the larger half of the numbers

public:
    MedianFinder() {}

    void addNum(int num) {
        maxHeap.push(num); // Add to the max-heap (smaller half)

        minHeap.push(maxHeap.top()); // Move the largest element from maxHeap to minHeap
        maxHeap.pop();

        if (maxHeap.size() < minHeap.size()) {
            maxHeap.push(minHeap.top()); // Ensure maxHeap has the larger half or the same size
            minHeap.pop();
        }
    }

    double findMedian() {
        if (maxHeap.size() == minHeap.size()) {
            return (maxHeap.top() + minHeap.top()) / 2.0; // Average of the two middle values
        } else {
            return maxHeap.top(); // If maxHeap has more elements, return the top element
        }
    }
};
Time Complexity:

addNum(): O(log n) (heap insertion/removal takes logarithmic time).
findMedian(): O(1) (returning the top element of heaps).
Space Complexity: O(n) where n is the number of elements added so far.

4. K Closest Points to Origin
cpp
Copy code
#include <queue>
#include <vector>

using namespace std;

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        auto dist = [](vector<int>& a, vector<int>& b) {
            return a[0] * a[0] + a[1] * a[1]; // Compute squared distance from the origin
        };
        
        priority_queue<vector<int>, vector<vector<int>>, function<bool(vector<int>&, vector<int>&)>> pq(
            [&](vector<int>& a, vector<int>& b) {
                return dist(a, b) > dist(b, a); // Min-heap based on distance from origin
            }
        );
        
        for (auto& point : points) {
            pq.push(point);
            if (pq.size() > k) {
                pq.pop(); // Keep only the k closest points
            }
        }
        
        vector<vector<int>> result;
        while (!pq.empty()) {
            result.push_back(pq.top());
            pq.pop();
        }
        
        return result;
    }
};
Time Complexity: O(n log k) where n is the number of points. For each point, we insert it into the priority queue, which takes O(log k) time.
Space Complexity: O(k) for the priority queue that stores the closest k points.

Complexity Summary:
Kth Largest Element in an Array

Time Complexity: O(n log k)
Space Complexity: O(k)
Kth Largest Element in a Stream

Time Complexity: O(log k) per insertion
Space Complexity: O(k)
Find Median from Data Stream

Time Complexity: O(log n) for addNum(), O(1) for findMedian()
Space Complexity: O(n)
K Closest Points to Origin

Time Complexity: O(n log k)
Space Complexity: O(k)

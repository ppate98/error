1. Best Time to Buy and Sell Stock
Problem: Given an array prices, where prices[i] is the price of a given stock on the ith day, return the maximum profit you can achieve by buying and selling one share of the stock. You must buy before you sell.

Solution:

cpp
Copy code
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX;
        int maxProfit = 0;
        
        for (int price : prices) {
            minPrice = min(minPrice, price);  // Track the minimum price
            maxProfit = max(maxProfit, price - minPrice);  // Update max profit
        }
        
        return maxProfit;
    }
};
Explanation:

We iterate through the prices, updating the minPrice whenever a lower price is found.
The maxProfit is updated whenever the difference between the current price and the minPrice is greater than the previous maxProfit.
Time complexity: O(n) where n is the number of days (prices array length).
Space complexity: O(1) as we only use a couple of extra variables for tracking prices.
2. Longest Substring Without Repeating Characters
Problem: Given a string s, find the length of the longest substring without repeating characters.

Solution:

cpp
Copy code
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> set;
        int left = 0, maxLength = 0;
        
        for (int right = 0; right < s.length(); ++right) {
            while (set.find(s[right]) != set.end()) {
                set.erase(s[left]);
                left++;
            }
            set.insert(s[right]);
            maxLength = max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
};
Explanation:

We use a sliding window (two pointers, left and right) and a set to track characters in the current window.
The window is expanded by moving the right pointer. If we encounter a repeating character, the left pointer is moved to shrink the window until there are no duplicates.
Time complexity: O(n), where n is the length of the string.
Space complexity: O(min(n, m)), where m is the size of the character set (for an ASCII string, this would be O(1)).
3. Longest Repeating Character Replacement
Problem: You are given a string s and an integer k. You can replace up to k characters in the string to make the longest substring of repeating characters. Return the length of the longest substring after these replacements.

Solution:

cpp
Copy code
class Solution {
public:
    int characterReplacement(string s, int k) {
        vector<int> charCount(26, 0);  // To store counts of each character
        int maxCount = 0, left = 0, maxLength = 0;
        
        for (int right = 0; right < s.length(); ++right) {
            maxCount = max(maxCount, ++charCount[s[right] - 'A']);  // Update maxCount for current character
            
            // If the window size minus the most frequent character count exceeds k, shrink window
            if (right - left + 1 - maxCount > k) {
                --charCount[s[left] - 'A'];
                left++;
            }
            
            maxLength = max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
};
Explanation:

We maintain a sliding window defined by left and right. The maxCount tracks the frequency of the most frequent character in the current window.
If the window size minus maxCount exceeds k (i.e., more than k replacements are required), we shrink the window by moving the left pointer.
Time complexity: O(n), where n is the length of the string.
Space complexity: O(1), as the character frequency array has a fixed size (26 for uppercase English letters).
4. Permutation in String
Problem: Given two strings s1 and s2, return true if s2 contains any permutation of s1.

Solution:

cpp
Copy code
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if (s1.length() > s2.length()) return false;
        
        vector<int> s1Freq(26, 0), s2Freq(26, 0);
        
        for (char c : s1) {
            s1Freq[c - 'a']++;
        }
        
        int left = 0, right = 0;
        while (right < s2.length()) {
            s2Freq[s2[right] - 'a']++;
            
            // Check if the current window is a valid permutation of s1
            if (right - left + 1 == s1.length()) {
                if (s1Freq == s2Freq) return true;
                s2Freq[s2[left] - 'a']--;
                left++;
            }
            
            right++;
        }
        
        return false;
    }
};
Explanation:

We maintain two frequency arrays (s1Freq and s2Freq) for the characters of s1 and the current window in s2.
We slide the window over s2, updating the frequency array and checking if it matches s1Freq.
Time complexity: O(n), where n is the length of s2.
Space complexity: O(1), since the frequency array has a fixed size of 26.
5. Minimum Window Substring
Problem: Given strings s and t, return the minimum window in s which will contain all the characters in t.

Solution:

cpp
Copy code
class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char, int> targetFreq, windowFreq;
        for (char c : t) targetFreq[c]++;
        
        int left = 0, right = 0, minLen = INT_MAX, minStart = 0;
        int count = 0;
        
        while (right < s.length()) {
            char c = s[right];
            windowFreq[c]++;
            
            if (targetFreq.find(c) != targetFreq.end() && windowFreq[c] <= targetFreq[c]) {
                count++;
            }
            
            while (count == t.length()) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minStart = left;
                }
                windowFreq[s[left]]--;
                if (targetFreq.find(s[left]) != targetFreq.end() && windowFreq[s[left]] < targetFreq[s[left]]) {
                    count--;
                }
                left++;
            }
            
            right++;
        }
        
        return minLen == INT_MAX ? "" : s.substr(minStart, minLen);
    }
};
Explanation:

We use two frequency maps: one for the target (t) and one for the current window in s.
The sliding window is expanded by moving right and shrunk by moving left when all characters in t are found in the window.
Time complexity: O(n), where n is the length of s.
Space complexity: O(n), due to the frequency maps.
6. Sliding Window Maximum
Problem: Given an integer array nums and an integer k, return the maximum value in each sliding window of size k.

Solution:

cpp
Copy code
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> result;
        
        for (int i = 0; i < nums.size(); i++) {
            // Remove elements not within the window
            while (!dq.empty() && dq.front() <= i - k) dq.pop_front();
            
            // Remove smaller elements from the back of the deque
            while (!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back();
            
            dq.push_back(i);
            
            if (i >= k - 1) result.push_back(nums[dq.front()]);
        }
        
        return result;
    }
};
Explanation:

The deque stores indices of elements in nums. The elements in the deque are maintained in decreasing order.
For each window, we ensure that the largest element is at the front of the deque.
Time complexity: O(n), where n is the number of elements in the array.
Space complexity: O(k), where k is the size of the sliding window.
These solutions are efficient, with most of them running in O(n) time complexity and using minimal space.
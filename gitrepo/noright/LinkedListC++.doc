1. Reverse Linked List
Problem: Reverse a singly linked list.

Input: head = [1,2]
Output: [2,1]
Explanation: The algorithm uses two pointers (prev and curr) to reverse the list. It iterates through the list, pointing the curr.next to prev at each step, effectively reversing the direction of the list.

java
Copy code
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
}
2. Merge Two Sorted Lists
Problem: Merge two sorted linked lists into one sorted list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Explanation: Use two pointers to compare nodes from both lists. The smaller node is added to the result list, and the pointer for the list with the smaller node is moved forward. This process continues until both lists are exhausted.

java
Copy code
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }

        if (l1 != null) {
            curr.next = l1;
        } else {
            curr.next = l2;
        }

        return dummy.next;
    }
}
3. Reorder List
Problem: Reorder the linked list such that nodes alternate from the front and the end.

Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
Explanation: The algorithm first finds the middle of the list, then reverses the second half. It then merges the first half with the reversed second half in alternating order.

java
Copy code
class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) return;

        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode second = slow.next;
        slow.next = null;
        second = reverse(second);

        ListNode first = head;
        while (second != null) {
            ListNode temp1 = first.next;
            ListNode temp2 = second.next;

            first.next = second;
            second.next = temp1;

            first = temp1;
            second = temp2;
        }
    }

    private ListNode reverse(ListNode head) {
        ListNode prev = null, curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
4. Remove N-th Node from End of List
Problem: Remove the N-th node from the end of a linked list.

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Explanation: The algorithm uses the two-pointer technique. The fast pointer is moved n steps ahead, and then both pointers are moved together until the fast pointer reaches the end. This way, the slow pointer will point to the node just before the node to be deleted.

java
Copy code
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode fast = dummy, slow = dummy;

        for (int i = 1; i <= n + 1; i++) {
            fast = fast.next;
        }

        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }

        slow.next = slow.next.next;
        return dummy.next;
    }
}
5. Copy List with Random Pointer
Problem: Copy a linked list where each node has a random pointer in addition to the next pointer.

Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]
Explanation: The algorithm creates a new node for each original node and places it right after the corresponding original node. Then, it sets the random pointers of the new nodes and separates the original and new lists.

java
Copy code
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;

        Map<Node, Node> map = new HashMap<>();
        Node curr = head;

        // First pass: create new nodes without random pointers
        while (curr != null) {
            map.put(curr, new Node(curr.val));
            curr = curr.next;
        }

        curr = head;

        // Second pass: set next and random pointers
        while (curr != null) {
            Node clone = map.get(curr);
            clone.next = map.get(curr.next);
            clone.random = map.get(curr.random);
            curr = curr.next;
        }

        return map.get(head);
    }
}
6. Add Two Numbers
Problem: Add two numbers represented as linked lists.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: The algorithm performs digit-by-digit addition from the least significant digit (head of the list), keeping track of the carry. Each digit sum is placed into the result list.

java
Copy code
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }

            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
        }

        return dummy.next;
    }
}
7. Linked List Cycle
Problem: Determine if a linked list has a cycle.

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: This problem is solved using Floyd's Tortoise and Hare algorithm. Two pointers move at different speeds, and if they meet, a cycle is detected.

java
Copy code
class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false;

        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) return true;
        }
        return false;
    }
}
8. Merge K Sorted Lists
Problem: Merge k sorted linked lists into one sorted list.

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: Use a min-heap (priority queue) to store the smallest node from each list, and then repeatedly extract the smallest node, adding it to the result list.

java
Copy code
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
        for (ListNode list : lists) {
            if (list != null) minHeap.offer(list);
        }

        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;
        while (!minHeap.isEmpty()) {
            ListNode node = minHeap.poll();
            curr.next = node;
            curr = curr.next;
            if (node.next != null) minHeap.offer(node.next);
        }

        return dummy.next;
    }
}
9. Reverse Nodes in k-Group
Problem: Reverse the nodes of a linked list k at a time.

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
Explanation: The algorithm divides the list into groups of size k and reverses each group, adjusting the pointers to maintain the correct sequence.

java
Copy code
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = dummy, nex = dummy, pre = dummy;
        int count = 0;
        while (cur.next != null) {
            cur = cur.next;
            count++;
        }

        while (count >= k) {
            cur = pre.next;
            nex = cur.next;
            for (int i = 1; i < k; i++) {
                cur.next = nex.next;
                nex.next = pre.next;
                pre.next = nex;
                nex = cur.next;
            }
            pre = cur;
            count -= k;
        }

        return dummy.next;
    }
}
Let me know if you need further clarification or additional problems!


1. Reverse Linked List
Time Complexity: O(n) where n is the number of nodes in the linked list, as each node is visited once.

Space Complexity: O(1) (in-place reversal, no extra space required).

2. Merge Two Sorted Lists
Time Complexity: O(n + m) where n and m are the lengths of the two input linked lists. We traverse both lists entirely.

Space Complexity: O(1) (since we're merging in-place and not using extra space except for the result linked list).

3. Remove Nth Node from End of List
Time Complexity: O(n) where n is the length of the linked list. We make two passes: one to find the length and another to remove the node.

Space Complexity: O(1) (no extra space used except for pointers).

4. Add Two Numbers (Linked List)
Time Complexity: O(max(n, m)) where n and m are the lengths of the two input linked lists. We process each node once.

Space Complexity: O(max(n, m)) for the result linked list, which stores the sum of the two numbers.

5. Palindrome Linked List
Time Complexity: O(n) where n is the number of nodes in the linked list. We traverse the list once to find the middle, and another pass to check for the palindrome.

Space Complexity: O(1) if we reverse the second half of the list in-place. Otherwise, O(n) if we use extra space (e.g., a stack).

6. Intersection of Two Linked Lists
Time Complexity: O(n + m) where n and m are the lengths of the two linked lists. We find the intersection by traversing each list once.

Space Complexity: O(1) (no extra space used except for the two pointers).

7. Merge k Sorted Lists
Time Complexity: O(n log k) where n is the total number of nodes in all k linked lists, and k is the number of linked lists. We perform a merging operation log k times for each node.

Space Complexity: O(k) for the priority queue used to merge the k sorted lists.

8. Remove Duplicates from Sorted List
Time Complexity: O(n) where n is the number of nodes in the linked list, since we only need to traverse the list once.

Space Complexity: O(1) (no extra space used except for the pointers).

9. Cycle in Linked List
Time Complexity: O(n) where n is the number of nodes in the linked list. We traverse the list to detect a cycle using the two-pointer technique (Floyd's cycle-finding algorithm).

Space Complexity: O(1) (constant space for the two pointers).

10. Rearrange Linked List
Time Complexity: O(n) where n is the number of nodes in the linked list. We find the middle, split the list, and rearrange in one pass each.

Space Complexity: O(1) (we rearrange the list in-place without using extra space).






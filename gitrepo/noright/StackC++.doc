1. Valid Parentheses (Leetcode: Valid Parentheses)
C++ Code:

cpp
Copy code
#include <iostream>
#include <stack>
#include <string>

bool isValid(const std::string& s) {
    std::stack<char> stack;
    for (char ch : s) {
        if (ch == '(' || ch == '{' || ch == '[') {
            stack.push(ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            if (stack.empty()) return false;
            char top = stack.top();
            stack.pop();
            if ((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) {
                return false;
            }
        }
    }
    return stack.empty();
}

int main() {
    std::cout << isValid("(){}[]") << std::endl; // true
    std::cout << isValid("([)]") << std::endl; // false
    std::cout << isValid("{[]}") << std::endl; // true
}
Time Complexity: O(n), where n is the length of the string.
Space Complexity: O(n), due to the stack used to store opening brackets.

2. Min Stack (Leetcode: Min Stack)
C++ Code:

cpp
Copy code
#include <iostream>
#include <stack>

class MinStack {
public:
    void push(int x) {
        stack.push(x);
        if (minStack.empty() || x <= minStack.top()) {
            minStack.push(x);
        }
    }

    void pop() {
        if (stack.top() == minStack.top()) {
            minStack.pop();
        }
        stack.pop();
    }

    int top() {
        return stack.top();
    }

    int getMin() {
        return minStack.top();
    }

private:
    std::stack<int> stack;
    std::stack<int> minStack;
};

int main() {
    MinStack minStack;
    minStack.push(-2);
    minStack.push(0);
    minStack.push(-3);
    std::cout << minStack.getMin() << std::endl; // -3
    minStack.pop();
    std::cout << minStack.top() << std::endl; // 0
    std::cout << minStack.getMin() << std::endl; // -2
}
Time Complexity: O(1) for all operations (push, pop, top, getMin).
Space Complexity: O(n), where n is the number of elements in the stack.

3. Evaluate Reverse Polish Notation (Leetcode: Evaluate Reverse Polish Notation)
C++ Code:

cpp
Copy code
#include <iostream>
#include <stack>
#include <vector>
#include <string>
#include <sstream>

int evalRPN(const std::vector<std::string>& tokens) {
    std::stack<int> stack;
    for (const std::string& token : tokens) {
        if (token == "+" || token == "-" || token == "*" || token == "/") {
            int operand2 = stack.top();
            stack.pop();
            int operand1 = stack.top();
            stack.pop();
            if (token == "+") stack.push(operand1 + operand2);
            if (token == "-") stack.push(operand1 - operand2);
            if (token == "*") stack.push(operand1 * operand2);
            if (token == "/") stack.push(operand1 / operand2);
        } else {
            stack.push(std::stoi(token));
        }
    }
    return stack.top();
}

int main() {
    std::vector<std::string> tokens = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
    std::cout << evalRPN(tokens) << std::endl; // 22
}
Time Complexity: O(n), where n is the number of tokens.
Space Complexity: O(n), due to the stack used to store operands.

4. Generate Parentheses (Leetcode: Generate Parentheses)
C++ Code:

cpp
Copy code
#include <iostream>
#include <vector>
#include <string>

void generateParenthesesHelper(std::vector<std::string>& result, std::string current, int open, int close, int n) {
    if (current.length() == n * 2) {
        result.push_back(current);
        return;
    }

    if (open < n) {
        generateParenthesesHelper(result, current + "(", open + 1, close, n);
    }
    if (close < open) {
        generateParenthesesHelper(result, current + ")", open, close + 1, n);
    }
}

std::vector<std::string> generateParentheses(int n) {
    std::vector<std::string> result;
    generateParenthesesHelper(result, "", 0, 0, n);
    return result;
}

int main() {
    std::vector<std::string> parentheses = generateParentheses(3);
    for (const std::string& str : parentheses) {
        std::cout << str << std::endl; // ((())), (()()), (())(), ()(()), ()()()
    }
}
Time Complexity: O(4^n / sqrt(n)), where n is the number of pairs of parentheses.
Space Complexity: O(n), for storing the generated parentheses.

5. Daily Temperatures (Leetcode: Daily Temperatures)
C++ Code:

cpp
Copy code
#include <iostream>
#include <vector>
#include <stack>

std::vector<int> dailyTemperatures(const std::vector<int>& temperatures) {
    std::vector<int> result(temperatures.size(), 0);
    std::stack<int> stack;

    for (int i = 0; i < temperatures.size(); ++i) {
        while (!stack.empty() && temperatures[i] > temperatures[stack.top()]) {
            int index = stack.top();
            stack.pop();
            result[index] = i - index;
        }
        stack.push(i);
    }

    return result;
}

int main() {
    std::vector<int> temperatures = {73, 74, 75, 71, 69, 72, 76, 73};
    std::vector<int> result = dailyTemperatures(temperatures);
    for (int days : result) {
        std::cout << days << " ";
    }
}
Time Complexity: O(n), where n is the length of the temperature array.
Space Complexity: O(n), for the stack and result array.

6. Car Fleet (Leetcode: Car Fleet)
C++ Code:

cpp
Copy code
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

struct Car {
    int position;
    double timeToReach;
};

int carFleet(int target, const std::vector<int>& position, const std::vector<int>& speed) {
    int n = position.size();
    std::vector<Car> cars(n);
    for (int i = 0; i < n; ++i) {
        cars[i] = {position[i], static_cast<double>(target - position[i]) / speed[i]};
    }

    std::sort(cars.begin(), cars.end(), [](const Car& a, const Car& b) {
        return a.position > b.position;
    });

    std::stack<double> stack;
    stack.push(cars[0].timeToReach);

    for (int i = 1; i < n; ++i) {
        if (cars[i].timeToReach > stack.top()) {
            stack.push(cars[i].timeToReach);
        }
    }

    return stack.size();
}

int main() {
    int target = 12;
    std::vector<int> position = {10, 8, 0, 5, 3};
    std::vector<int> speed = {2, 4, 1, 1, 3};
    std::cout << carFleet(target, position, speed) << std::endl; // 3
}
Time Complexity: O(n log n), due to sorting.
Space Complexity: O(n), for storing the car objects and the stack.

7. Largest Rectangle in Histogram (Leetcode: Largest Rectangle in Histogram)
C++ Code:

cpp
Copy code
#include <iostream>
#include <vector>
#include <stack>

int largestRectangleArea(const std::vector<int>& heights) {
    int n = heights.size();
    std::vector<int> left(n, 0), right(n, n);
    std::stack<int> stack;

    for (int i = 0; i < n; ++i) {
        while (!stack.empty() && heights[i] <= heights[stack.top()]) {
            stack.pop();
        }
        left[i] = (stack.empty()) ? 0 : stack.top() + 1;
        stack.push(i);
    }

    while (!stack.empty()) stack.pop();

    for (int i = n - 1; i >= 0; --i) {
        while (!stack.empty() && heights[i] <= heights[stack.top()]) {
            stack.pop();
        }
        right[i] = (stack.empty()) ? n : stack.top();
        stack.push(i);
    }

    int maxArea = 0;
    for (int i = 0; i < n; ++i) {
        maxArea = std::max(maxArea, heights[i] * (right[i] - left[i]));
    }

    return maxArea;
}

int main() {
    std::vector<int> heights = {2, 1, 5, 6, 2, 3};
    std::cout << largestRectangleArea(heights) << std::endl; // 10
}
Time Complexity: O(n), where n is the length of the heights array.
Space Complexity: O(n), for the left and right arrays and the stack.

Summary of Complexities:
Valid Parentheses: Time O(n), Space O(n)
Min Stack: Time O(1) for all operations, Space O(n)
Evaluate Reverse Polish Notation: Time O(n), Space O(n)
Generate Parentheses: Time O(4^n / sqrt(n)), Space O(n)
Daily Temperatures: Time O(n), Space O(n)
Car Fleet: Time O(n log n), Space O(n)
Largest Rectangle in Histogram: Time O(n), Space O(n)
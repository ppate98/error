https://leetcode.com/problems/merge-intervals/

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // Sort the intervals based on the start time
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));
        
        List<int[]> mergedIntervals = new ArrayList<>();
        int[] currentInterval = intervals[0];
        
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] <= currentInterval[1]) {
                // Overlapping intervals, update the end time
                currentInterval[1] = Math.max(currentInterval[1], intervals[i][1]);
            } else {
                // Non-overlapping interval, add the current interval to the result list
                mergedIntervals.add(currentInterval);
                currentInterval = intervals[i];
            }
        }
        
        // Add the last interval
        mergedIntervals.add(currentInterval);
        
        // Convert the list to an array
        int[][] result = new int[mergedIntervals.size()][2];
        for (int i = 0; i < mergedIntervals.size(); i++) {
            result[i] = mergedIntervals.get(i);
        }
        
        return result;
    }
}


https://leetcode.com/problems/non-overlapping-intervals/
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return 0;
        }
        
        // Sort the intervals based on the end time
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[1]));
        
        int count = 0;
        int end = intervals[0][1];
        
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < end) {
                // Overlapping interval found, increment the count
                count++;
            } else {
                // Non-overlapping interval found, update the end time
                end = intervals[i][1];
            }
        }
        
        return count;
    }
}


https://leetcode.com/problems/meeting-rooms/

import java.util.Arrays;

class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        int n = intervals.length;

        int[] startTimes = new int[n];
        int[] endTimes = new int[n];

        for (int i = 0; i < n; i++) {
            startTimes[i] = intervals[i][0];
            endTimes[i] = intervals[i][1];
        }

        Arrays.sort(startTimes);
        Arrays.sort(endTimes);

        for (int i = 1; i < n; i++) {
            if (startTimes[i] < endTimes[i - 1]) {
                return false;
            }
        }

        return true;
    }
}



https://leetcode.com/problems/meeting-rooms-ii/

import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return 0;
        }
        
        // Sort the intervals based on the start time
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        // Create a min-heap to store the end times of the meetings
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Add the first meeting's end time to the min-heap
        minHeap.offer(intervals[0][1]);
        
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] >= minHeap.peek()) {
                // The earliest available room can be reused
                minHeap.poll();
            }
            
            // Add the current meeting's end time to the min-heap
            minHeap.offer(intervals[i][1]);
        }
        
        // The size of the min-heap represents the minimum number of meeting rooms required
        return minHeap.size();
    }
}


https://leetcode.com/problems/minimum-interval-to-include-each-query/

import java.util.*;

class Solution {
    public int[] minInterval(int[][] intervals, int[] queries) {
        int n = queries.length;
        int[] result = new int[n];

        int[][] sortedIntervals = intervals.clone();
        Arrays.sort(sortedIntervals, Comparator.comparingInt(a -> a[0]));

        TreeMap<Integer, Integer> intervalLengths = new TreeMap<>();
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        int i = 0;
        for (int query : queries) {
            while (i < sortedIntervals.length && sortedIntervals[i][0] <= query) {
                int start = sortedIntervals[i][0];
                int end = sortedIntervals[i][1];
                int length = end - start + 1;
                intervalLengths.put(end, length);
                pq.offer(length);
                i++;
            }

            while (!pq.isEmpty() && pq.peek() < query) {
                int lengthToRemove = pq.poll();
                intervalLengths.remove(lengthToRemove);
            }

            if (!intervalLengths.isEmpty()) {
                result[queryIndex] = intervalLengths.firstEntry().getValue();
            } else {
                result[queryIndex] = -1;
            }
        }

        return result;
    }
}


https://leetcode.com/problems/insert-interval/

import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> mergedIntervals = new ArrayList<>();
        int i = 0;
        int n = intervals.length;
        
        // Add intervals that end before the newInterval starts
        while (i < n && intervals[i][1] < newInterval[0]) {
            mergedIntervals.add(intervals[i]);
            i++;
        }
        
        // Merge intervals that overlap with the newInterval
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        
        // Add the merged newInterval
        mergedIntervals.add(newInterval);
        
        // Add the remaining intervals
        while (i < n) {
            mergedIntervals.add(intervals[i]);
            i++;
        }
        
        // Convert the list to an array
        int[][] result = new int[mergedIntervals.size()][2];
        for (int j = 0; j < mergedIntervals.size(); j++) {
            result[j] = mergedIntervals.get(j);
        }
        
        return result;
    }
}

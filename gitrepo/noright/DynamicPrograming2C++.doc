Here's the C++ translation of the Java code for the problems you provided, along with their time complexities.

1. Unique Paths
cpp
Copy code
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 1));

        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        return dp[m - 1][n - 1];
    }
};
Time Complexity: O(m * n), where m and n are the dimensions of the grid.
2. Longest Common Subsequence
cpp
Copy code
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length(), n = text2.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[m][n];
    }
};
Time Complexity: O(m * n), where m and n are the lengths of the two strings.
3. Best Time to Buy and Sell Stock with Cooldown
cpp
Copy code
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n <= 1) return 0;

        vector<int> buy(n), sell(n);
        buy[0] = -prices[0];
        sell[0] = 0;

        for (int i = 1; i < n; ++i) {
            int cooldown = (i >= 2) ? sell[i - 2] : 0;
            buy[i] = max(buy[i - 1], cooldown - prices[i]);
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i]);
        }

        return sell[n - 1];
    }
};
Time Complexity: O(n), where n is the number of days.
4. Coin Change II
cpp
Copy code
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount + 1, 0);
        dp[0] = 1;

        for (int coin : coins) {
            for (int i = coin; i <= amount; ++i) {
                dp[i] += dp[i - coin];
            }
        }

        return dp[amount];
    }
};
Time Complexity: O(amount * coins.size()), where amount is the target value and coins.size() is the number of different coin denominations.
5. Target Sum
cpp
Copy code
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        
        if (target > sum || target < -sum) return 0;

        int n = nums.size();
        vector<vector<int>> dp(n + 1, vector<int>(2 * sum + 1, 0));
        dp[0][sum] = 1;

        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= 2 * sum; ++j) {
                if (j - nums[i - 1] >= 0) dp[i][j] += dp[i - 1][j - nums[i - 1]];
                if (j + nums[i - 1] <= 2 * sum) dp[i][j] += dp[i - 1][j + nums[i - 1]];
            }
        }

        return dp[n][sum + target];
    }
};
Time Complexity: O(n * sum), where n is the number of elements and sum is the sum of the elements in nums.
6. Interleaving String
cpp
Copy code
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.length(), n = s2.length();
        
        if (m + n != s3.length()) return false;

        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;

        for (int i = 1; i <= m; ++i) {
            dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];
        }

        for (int j = 1; j <= n; ++j) {
            dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];
        }

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||
                           (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
            }
        }

        return dp[m][n];
    }
};
Time Complexity: O(m * n), where m and n are the lengths of s1 and s2.
7. Longest Increasing Path in a Matrix
cpp
Copy code
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) return 0;
        
        int rows = matrix.size(), cols = matrix[0].size();
        vector<vector<int>> memo(rows, vector<int>(cols, 0));
        int maxLength = 0;

        vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                maxLength = max(maxLength, dfs(matrix, i, j, directions, memo));
            }
        }

        return maxLength;
    }

private:
    int dfs(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& directions, vector<vector<int>>& memo) {
        if (memo[i][j] != 0) return memo[i][j];

        int maxLength = 1;
        for (auto& dir : directions) {
            int x = i + dir[0], y = j + dir[1];
            if (x >= 0 && x < matrix.size() && y >= 0 && y < matrix[0].size() && matrix[x][y] > matrix[i][j]) {
                maxLength = max(maxLength, 1 + dfs(matrix, x, y, directions, memo));
            }
        }

        memo[i][j] = maxLength;
        return maxLength;
    }
};
Time Complexity: O(m * n), where m and n are the dimensions of the matrix.
8. Distinct Subsequences
cpp
Copy code
class Solution {
public:
    int numDistinct(string s, string t) {
        int m = t.length(), n = s.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        for (int j = 0; j <= n; ++j) dp[0][j] = 1;
        
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (t[i - 1] == s[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1];
                } else {
                    dp[i][j] = dp[i][j - 1];
                }
            }
        }

        return dp[m][n];
    }
};
Time Complexity: O(m * n), where m and n are the lengths of t and s.
9. Edit Distance
cpp
Copy code
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.length(), n = word2.length();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));

        for (int i = 0; i <= m; ++i) dp[i][0] = i;
        for (int j = 0; j <= n; ++j) dp[0][j] = j;

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]});
                }
            }
        }

        return dp[m][n];
    }
};
Time Complexity: O(m * n), where m and n are the lengths of the two words.
Let me know if you need further clarifications!
Tree

https://leetcode.com/problems/serialize-and-deserialize-binary-tree/
Serialization is the process of converting a data structure or object into a sequence of bits
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Codec {
    // Serialize the binary tree using preorder traversal
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        return sb.toString();
    }

    private void serializeHelper(TreeNode node, StringBuilder sb) {
        if (node == null) {
            sb.append("null").append(",");
            return;
        }

        sb.append(node.val).append(",");
        serializeHelper(node.left, sb);
        serializeHelper(node.right, sb);
    }

    // Deserialize the serialized string to recreate the binary tree
    public TreeNode deserialize(String data) {
        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(",")));
        return deserializeHelper(queue);
    }

    private TreeNode deserializeHelper(Queue<String> queue) {
        String val = queue.poll();
        if (val.equals("null")) {
            return null;
        }

        TreeNode node = new TreeNode(Integer.parseInt(val));
        node.left = deserializeHelper(queue);
        node.right = deserializeHelper(queue);
        return node;
    }
}

public class Main {
    public static void main(String[] args) {
        Codec codec = new Codec();

        // Create a binary tree: [1, 2, 3, null, null, 4, 5]
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.right.left = new TreeNode(4);
        root.right.right = new TreeNode(5);

        // Serialize the binary tree
        String serialized = codec.serialize(root);
        System.out.println("Serialized tree: " + serialized);

        // Deserialize the serialized string



https://leetcode.com/problems/binary-tree-maximum-path-sum/
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    private int maxSum;

    public int maxPathSum(TreeNode root) {
        maxSum = Integer.MIN_VALUE;
        maxPathSumHelper(root);
        return maxSum;
    }

    private int maxPathSumHelper(TreeNode node) {
        if (node == null) {
            return 0;
        }

        // Recursively calculate the maximum sum of left and right subtrees
        int leftSum = Math.max(maxPathSumHelper(node.left), 0);
        int rightSum = Math.max(maxPathSumHelper(node.right), 0);

        // Update the maximum sum if the current path (including node) has a greater sum
        int currentSum = node.val + leftSum + rightSum;
        maxSum = Math.max(maxSum, currentSum);

        // Return the maximum sum of paths that include either the left or right subtree
        return node.val + Math.max(leftSum, rightSum);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [1, 2, 3]
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);

        // Find the maximum path sum
        int maxPathSum = solution.maxPathSum(root);
        System.out.println("Maximum Path Sum: " + maxPathSum);
    }
}



https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

import java.util.HashMap;
import java.util.Map;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    private Map<Integer, Integer> inorderMap;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // Create a map to store the indices of inorder elements
        inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        return buildTreeHelper(preorder, inorder, 0, 0, inorder.length - 1);
    }

    private TreeNode buildTreeHelper(int[] preorder, int[] inorder, int preStart, int inStart, int inEnd) {
        if (preStart > preorder.length - 1 || inStart > inEnd) {
            return null;
        }

        // Create a new TreeNode using the current preorder element
        TreeNode node = new TreeNode(preorder[preStart]);

        // Find the index of the current preorder element in the inorder array
        int inIndex = inorderMap.get(preorder[preStart]);

        // Recursively build the left and right subtrees
        node.left = buildTreeHelper(preorder, inorder, preStart + 1, inStart, inIndex - 1);
        node.right = buildTreeHelper(preorder, inorder, preStart + inIndex - inStart + 1, inIndex + 1, inEnd);

        return node;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1:
        int[] preorder1 = {3, 9, 20, 15, 7};
        int[] inorder1 = {9, 3, 15, 20, 7};
        TreeNode root1 = solution.buildTree(preorder1, inorder1);
        System.out.println("Example 1:");
        System.out.println("Inorder Traversal: " + inorderTraversal(root1));

        // Example 2:
        int[] preorder2 = {1, 2};
        int[] inorder2 = {1, 2};
        TreeNode root2 = solution.buildTree(preorder2, inorder2);
        System.out.println("\nExample 2:");
        System.out.println("Inorder Traversal: " + inorderTraversal(root2));
    }

    // Helper function to perform inorder traversal
    private static String inorderTraversal(TreeNode root) {
        if (root == null) {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        inorderTraversalHelper(root, sb);
        return sb.toString().trim();
    }

    private static void inorderTraversalHelper(TreeNode node, StringBuilder sb) {
        if (node == null) {
            return;
        }

        inorderTraversalHelper(node.left, sb);
        sb.append(node.val).append(" ");
        inorderTraversalHelper(node.right, sb);
    }
}


https://leetcode.com/problems/kth-smallest-element-in-a-bst/

Input: root = [3,1,4,null,2], k = 1
Output: 1

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    private int count;
    private int result;

    public int kthSmallest(TreeNode root, int k) {
        count = 0;
        result = 0;
        inorderTraversal(root, k);
        return result;
    }

    private void inorderTraversal(TreeNode node, int k) {
        if (node == null) {
            return;
        }

        // Perform inorder traversal
        inorderTraversal(node.left, k);

        // Update the count and result when the kth smallest element is found
        count++;
        if (count == k) {
            result = node.val;
            return;
        }

        inorderTraversal(node.right, k);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary search tree: [3,1,4,null,2]
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(1);
        root.right = new TreeNode(4);
        root.left.right = new TreeNode(2);

        int k = 1;
        int kthSmallest = solution.kthSmallest(root, k);
        System.out.println("Kth Smallest Element: " + kthSmallest);
    }
}


https://leetcode.com/problems/validate-binary-search-tree/
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    private TreeNode prev;

    public boolean isValidBST(TreeNode root) {
        prev = null;
        return isValidBSTHelper(root);
    }

    private boolean isValidBSTHelper(TreeNode node) {
        if (node == null) {
            return true;
        }

        // Check the left subtree
        if (!isValidBSTHelper(node.left)) {
            return false;
        }

        // Check the current node's value
        if (prev != null && node.val <= prev.val) {
            return false;
        }
        prev = node;

        // Check the right subtree
        return isValidBSTHelper(node.right);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [2,1,3]
        TreeNode root = new TreeNode(2);
        root.left = new TreeNode(1);
        root.right = new TreeNode(3);

        boolean isValid = solution.isValidBST(root);
        System.out.println("Is Valid BST? " + isValid);
    }
}


https://leetcode.com/problems/count-good-nodes-in-binary-tree/
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public int goodNodes(TreeNode root) {
        return countGoodNodes(root, Integer.MIN_VALUE);
    }

    private int countGoodNodes(TreeNode node, int maxSoFar) {
        if (node == null) {
            return 0;
        }

        // Check if the current node is a good node
        int count = (node.val >= maxSoFar) ? 1 : 0;

        // Update the maximum value seen so far
        maxSoFar = Math.max(maxSoFar, node.val);

        // Recursively count the good nodes in the left and right subtrees
        count += countGoodNodes(node.left, maxSoFar);
        count += countGoodNodes(node.right, maxSoFar);

        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [3,1,4,3,null,1,5]
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(1);
        root.right = new TreeNode(4);
        root.left.left = new TreeNode(3);
        root.right.left = new TreeNode(1);
        root.right.right = new TreeNode(5);

        int goodNodesCount = solution.goodNodes(root);
        System.out.println("Number of Good Nodes: " + goodNodesCount);
    }
}


https://leetcode.com/problems/binary-tree-right-side-view/
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rightSide = new ArrayList<>();
        if (root == null) {
            return rightSide;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            // Traverse all nodes at the current level
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();

                // Add the rightmost node to the right side view
                if (i == levelSize - 1) {
                    rightSide.add(node.val);
                }

                // Add the child nodes to the queue for the next level
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }

        return rightSide;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [1,2,3,null,5,null,4]
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.right = new TreeNode(5);
        root.right.right = new TreeNode(4);

        List<Integer> rightSideView = solution.rightSideView(root);
        System.out.println("Right Side View: " + rightSideView);
    }
}



https://leetcode.com/problems/binary-tree-level-order-traversal/
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]


import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levelOrder = new ArrayList<>();
        if (root == null) {
            return levelOrder;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>();

            // Traverse all nodes at the current level
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                currentLevel.add(node.val);

                // Add the child nodes to the queue for the next level
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // Add the values of the current level to the result
            levelOrder.add(currentLevel);
        }

        return levelOrder;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [3,9,20,null,null,15,7]
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);

        List<List<Integer>> levelOrderTraversal = solution.levelOrder(root);
        System.out.println("Level Order Traversal: " + levelOrderTraversal);
    }
}



https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == null || q == null) {
            return null;
        }

        int parentVal = root.val;
        int pVal = p.val;
        int qVal = q.val;

        if (pVal < parentVal && qVal < parentVal) {
            return lowestCommonAncestor(root.left, p, q);
        } else if (pVal > parentVal && qVal > parentVal) {
            return lowestCommonAncestor(root.right, p, q);
        } else {
            return root;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary search tree: [6,2,8,0,4,7,9,null,null,3,5]
        TreeNode root = new TreeNode(6);
        root.left = new TreeNode(2);
        root.right = new TreeNode(8);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(4);
        root.right.left = new TreeNode(7);
        root.right.right = new TreeNode(9);
        root.left.right.left = new TreeNode(3);
        root.left.right.right = new TreeNode(5);

        TreeNode p = new TreeNode(2);
        TreeNode q = new TreeNode(8);

        TreeNode lca = solution.lowestCommonAncestor(root, p, q);
        System.out.println("Lowest Common Ancestor: " + lca.val);
    }
}


https://leetcode.com/problems/subtree-of-another-tree/
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null) {
            return false;
        }

        if (isSameTree(s, t)) {
            return true;
        }

        return isSubtree(s.left, t) || isSubtree(s.right, t);
    }

    private boolean isSameTree(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true;
        }

        if (s == null || t == null) {
            return false;
        }

        return s.val == t.val && isSameTree(s.left, t.left) && isSameTree(s.right, t.right);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the main tree: [3,4,5,1,2,null,null,null,null,0]
        TreeNode mainTree = new TreeNode(3);
        mainTree.left = new TreeNode(4);
        mainTree.right = new TreeNode(5);
        mainTree.left.left = new TreeNode(1);
        mainTree.left.right = new TreeNode(2);
        mainTree.left.right.left = new TreeNode(0);

        // Create the potential subtree: [4,1,2]
        TreeNode subtree = new TreeNode(4);
        subtree.left = new TreeNode(1);
        subtree.right = new TreeNode(2);

        boolean isSubtree = solution.isSubtree(mainTree, subtree);
        System.out.println("Is Subtree: " + isSubtree);
    }
}


https://leetcode.com/problems/same-tree/
Input: p = [1,2,1], q = [1,1,2]
Output: false

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        }

        if (p == null || q == null) {
            return false;
        }

        if (p.val != q.val) {
            return false;
        }

        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the first tree: [1,2,3]
        TreeNode tree1 = new TreeNode(1);
        tree1.left = new TreeNode(2);
        tree1.right = new TreeNode(3);

        // Create the second tree: [1,2,3]
        TreeNode tree2 = new TreeNode(1);
        tree2.left = new TreeNode(2);
        tree2.right = new TreeNode(3);

        boolean isSame = solution.isSameTree(tree1, tree2);
        System.out.println("Is Same Tree: " + isSame);
    }
}


https://leetcode.com/problems/balanced-binary-tree/
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true;
        }

        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);

        if (Math.abs(leftHeight - rightHeight) > 1) {
            return false;
        }

        return isBalanced(root.left) && isBalanced(root.right);
    }

    private int getHeight(TreeNode node) {
        if (node == null) {
            return 0;
        }

        int leftHeight = getHeight(node.left);
        int rightHeight = getHeight(node.right);

        return Math.max(leftHeight, rightHeight) + 1;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a balanced binary tree: [3,9,20,null,null,15,7]
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);

        boolean isBalanced = solution.isBalanced(root);
        System.out.println("Is Balanced: " + isBalanced);
    }
}


https://leetcode.com/problems/diameter-of-binary-tree/
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    private int maxDiameter = 0;

    public int diameterOfBinaryTree(TreeNode root) {
        calculateDepth(root);
        return maxDiameter;
    }

    private int calculateDepth(TreeNode node) {
        if (node == null) {
            return 0;
        }

        int leftDepth = calculateDepth(node.left);
        int rightDepth = calculateDepth(node.right);

        // Update the maximum diameter if the current path is longer
        maxDiameter = Math.max(maxDiameter, leftDepth + rightDepth);

        // Return the depth of the current node
        return Math.max(leftDepth, rightDepth) + 1;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [1,2,3,4,5]
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        int diameter = solution.diameterOfBinaryTree(root);
        System.out.println("Diameter of Binary Tree: " + diameter);
    }
}


https://leetcode.com/problems/maximum-depth-of-binary-tree/

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        // Return the maximum depth between the left and right subtrees, plus 1 for the current node
        return Math.max(leftDepth, rightDepth) + 1;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [3,9,20,null,null,15,7]
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(9);
        root.right = new TreeNode(20);
        root.right.left = new TreeNode(15);
        root.right.right = new TreeNode(7);

        int maxDepth = solution.maxDepth(root);
        System.out.println("Maximum Depth of Binary Tree: " + maxDepth);
    }
}


https://leetcode.com/problems/invert-binary-tree/
Input: root = [2,1,3]
Output: [2,3,1]

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (node == null)
            return node;
 
        /* do the subtrees */
        Node left = mirror(node.left);
        Node right = mirror(node.right);
 
        /* swap the left and right pointers */
        node.left = right;
        node.right = left;
 
        return node;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a binary tree: [4,2,7,1,3,6,9]
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(3);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(9);

        TreeNode invertedTree = solution.invertTree(root);
        System.out.println("Inverted Binary Tree:");
        printTree(invertedTree);
    }

    // Helper method to print the binary tree
    public static void printTree(TreeNode node) {
        if (node == null) {
            return;
        }

        System.out.println(node.val);
        printTree(node.left);
        printTree(node.right);
    }
}



LinkedList
https://leetcode.com/problems/reverse-linked-list/
Input: head = [1,2]
Output: [2,1]

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        // Reverse the linked list
        ListNode reversed = solution.reverseList(head);

        // Print the reversed linked list: 5 -> 4 -> 3 -> 2 -> 1
        while (reversed != null) {
            System.out.print(reversed.val + " -> ");
            reversed = reversed.next;
        }
        System.out.println("null");
    }
}


https://leetcode.com/problems/merge-two-sorted-lists/
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }

        if (l1 != null) {
            curr.next = l1;
        } else {
            curr.next = l2;
        }

        return dummy.next;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the first sorted linked list: 1 -> 2 -> 4
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(2);
        l1.next.next = new ListNode(4);

        // Create the second sorted linked list: 1 -> 3 -> 4
        ListNode l2 = new ListNode(1);
        l2.next = new ListNode(3);
        l2.next.next = new ListNode(4);

        // Merge the two linked lists: 1 -> 1 -> 2 -> 3 -> 4 -> 4
        ListNode merged = solution.mergeTwoLists(l1, l2);

        // Print the merged linked list
        while (merged != null) {
            System.out.print(merged.val + " -> ");
            merged = merged.next;
        }
        System.out.println("null");
    }
}


https://leetcode.com/problems/reorder-list/
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        // Step 1: Find the middle of the linked list
        ListNode slow = head;
        ListNode fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode middle = slow.next;
        slow.next = null;

        // Step 2: Reverse the second half of the linked list
        ListNode prev = null;
        ListNode curr = middle;

        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        ListNode reversed = prev;

        // Step 3: Merge the first half with the reversed second half
        ListNode p1 = head;
        ListNode p2 = reversed;

//Input: p1 = [1,2,3],p2: [5,4]
//p1 =1, p2= 5, next1= 2, next2= 4 , 1->5->2
//p1= 2,p2=4 , next1= 3, next2 =null , 2->4->3, p1=3, p2=null
//o=[1,5,2,4,3] 

        while (p2 != null) {
            ListNode next1 = p1.next;
            ListNode next2 = p2.next;

            p1.next = p2;
            p2.next = next1;

            p1 = next1;
            p2 = next2;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the linked list: 1 -> 2 -> 3 -> 4
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);

        // Reorder the linked list: 1 -> 4 -> 2 -> 3
        solution.reorderList(head);

        // Print the reordered linked list
        while (head != null) {
            System.out.print(head.val + " -> ");
            head = head.next;
        }
        System.out.println("null");
    }
}



https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode fast = dummy;
        ListNode slow = dummy;

        // Move the fast pointer n nodes ahead
        for (int i = 0; i <= n; i++) {
            fast = fast.next;
        }

        // Move both pointers until the fast pointer reaches the end
        while (fast != null) {
            fast = fast.next;
            slow = slow.next;
        }

        // Remove the Nth node by updating the next pointer of the previous node
        slow.next = slow.next.next;

        return dummy.next;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        int n = 2;

        // Remove the 2nd node from the end: 1 -> 2 -> 3 -> 5
        ListNode result = solution.removeNthFromEnd(head, n);

        // Print the modified linked list
        while (result != null) {
            System.out.print(result.val + " -> ");
            result = result.next;
        }
        System.out.println("null");
    }
}



https://leetcode.com/problems/copy-list-with-random-pointer/ no
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]


class Node {
    int val;
    Node next;
    Node random;

    Node(int val) {
        this.val = val;
    }
}

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }

        // Create a mapping between original nodes and cloned nodes
        Map<Node, Node> map = new HashMap<>();

        Node curr = head;

        // Create the cloned nodes without setting the next and random pointers
        while (curr != null) {
            map.put(curr, new Node(curr.val));
            curr = curr.next;
        }

        curr = head;

        // Set the next and random pointers of the cloned nodes
        while (curr != null) {
            Node cloned = map.get(curr);
            cloned.next = map.get(curr.next);
            cloned.random = map.get(curr.random);
            curr = curr.next;
        }

        // Return the head of the cloned list
        return map.get(head);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the original linked list
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.random = head.next.next;
        head.next.random = head;
        head.next.next.random = head.next;

        // Copy the linked list
        Node cloned = solution.copyRandomList(head);

        // Print the cloned linked list
        while (cloned != null) {
            System.out.println("Node " + cloned.val);
            System.out.println("Next: " + (cloned.next != null ? cloned.next.val : "null"));
            System.out.println("Random: " + (cloned.random != null ? cloned.random.val : "null"));
            System.out.println();

            cloned = cloned.next;
        }
    }
}


https://leetcode.com/problems/add-two-numbers/
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        int carry = 0;

        while (l1 != null || l2 != null) {
            int sum = carry;

            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }

            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }

            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
        }

        if (carry > 0) {
            curr.next = new ListNode(carry);
        }

        return dummy.next;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create the first linked list: 2 -> 4 -> 3
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);

        // Create the second linked list: 5 -> 6 -> 4
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);

        // Add the two numbers: 2 -> 4 -> 3 + 5 -> 6 -> 4 = 7 -> 0 -> 8
        ListNode result = solution.addTwoNumbers(l1, l2);

        // Print the result
        while (result != null) {
            System.out.print(result.val + " -> ");
            result = result.next;
        }
        System.out.println("null");
    }
}


https://leetcode.com/problems/linked-list-cycle/
Example 1
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head.next;

        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }

            slow = slow.next;
            fast = fast.next.next;
        }

        return true;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create a linked list with a cycle: 1 -> 2 -> 3 -> 4 -> 5 -> 2 (pointing back to 2)
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);
        head.next.next.next.next.next = head.next;

        // Check if the linked list has a cycle
        boolean hasCycle = solution.hasCycle(head);

        System.out.println("Has cycle: " + hasCycle);
    }
}


https://leetcode.com/problems/find-the-duplicate-number/
Input: nums = [1,3,4,2,2]
Output: 2
import java.util.HashSet;
 
class GFG
{
 
// Representation of node
static class Node
{
    int data;
    Node next;
};
static Node head;
 
// Function to insert a node at the beginning
static void insert(Node ref_head, int item)
{
    Node temp = new Node();
    temp.data = item;
    temp.next = ref_head;
    head = temp;
     
}
 
// Function to count the number of
// duplicate nodes in the linked list
static int countNode(Node head)
{
    if (head == null)
    return 0;;
 
    // Create a hash table insert head
    HashSet<Integer>s = new HashSet<>();
    s.add(head.data);
 
    // Traverse through remaining nodes
    int count = 0;
    for (Node curr=head.next; curr != null; curr=curr.next)
    {
        if (s.contains(curr.data))
            count++;
 
        s.add(curr.data);
    }
 
    // Return the count of duplicate nodes
    return count;
}
 
// Driver code
public static void main(String[] args)
{
 
    insert(head, 5);
    insert(head, 7);
    insert(head, 5);
    insert(head, 1);
    insert(head, 7);
 
    System.out.println(countNode(head));
}
}


https://leetcode.com/problems/lru-cache/ no
The functions get and put must each run in O(1) average time complexity.
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

import java.util.HashMap;
import java.util.Map;

class Node {
    int key;
    int value;
    Node prev;
    Node next;

    Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}

class LRUCache {
    private Map<Integer, Node> cache;
    private int capacity;
    private Node head;
    private Node tail;

    public LRUCache(int capacity) {
        this.cache = new HashMap<>();
        this.capacity = capacity;
        this.head = new Node(-1, -1);
        this.tail = new Node(-1, -1);
        this.head.next = this.tail;
        this.tail.prev = this.head;
    }

    public int get(int key) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            removeNode(node);
            addToHead(node);
            return node.value;
        }
        return -1;
    }

    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            node.value = value;
            removeNode(node);
            addToHead(node);
        } else {
            if (cache.size() == capacity) {
                Node toRemove = tail.prev;
                removeNode(toRemove);
                cache.remove(toRemove.key);
            }
            Node newNode = new Node(key, value);
            addToHead(newNode);
            cache.put(key, newNode);
        }
    }

    private void removeNode(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    private void addToHead(Node node) {
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }
}

public class Main {
    public static void main(String[] args) {
        LRUCache cache = new LRUCache(2);

        // put(1, 1)
        cache.put(1, 1);

        // put(2, 2)
        cache.put(2, 2);

        // get(1) returns 1
        System.out.println(cache.get(1));

        // put(3, 3)
        cache.put(3, 3);

        // get(2) returns -1 (not found)
        System.out.println(cache.get(2));

        // put(4, 4)
        cache.put(4, 4);

        // get(1) returns -1 (not found)
        System.out.println(cache.get(1));

        // get(3) returns 3
        System.out.println(cache.get(3));

        // get(4) returns 4
        System.out.println(cache.get(4));
    }
}



https://leetcode.com/problems/merge-k-sorted-lists/

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

import java.util.Comparator;
import java.util.PriorityQueue;

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }

        // Create a min-heap with a custom comparator to order nodes based on their values
        //PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(node -> node.val));
		
		PriorityQueue<ListNode> minHeap =
                new PriorityQueue<>(new Comparator<ListNode>()
        {
            public int compare(ListNode a, ListNode b)
            {
                return a.val - b.val;
            }
         });
		 
		 

        // Add the head nodes of all lists to the min-heap
        for (ListNode list : lists) {
            if (list != null) {
                minHeap.offer(list);
            }
        }

        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;

        // Process the nodes in the min-heap until it is empty
        while (!minHeap.isEmpty()) {
            ListNode node = minHeap.poll();
            curr.next = node;
            curr = curr.next;

            // Add the next node from the list of the processed node to the min-heap
            if (node.next != null) {
                minHeap.offer(node.next);
            }
        }

        return dummy.next;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Create three sorted linked lists: 1 -> 4 -> 5, 1 -> 3 -> 4, 2 -> 6
        ListNode[] lists = new ListNode[3];
        lists[0] = new ListNode(1);
        lists[0].next = new ListNode(4);
        lists[0].next.next = new ListNode(5);
        lists[1] = new ListNode(1);
        lists[1].next = new ListNode(3);
        lists[1].next.next = new ListNode(4);
        lists[2] = new ListNode(2);
        lists[2].next = new ListNode(6);

        // Merge the sorted lists
        ListNode mergedList = solution.mergeKLists(lists);

        // Print the merged list
        while (mergedList != null) {
            System.out.print(mergedList.val + " -> ");
            mergedList = mergedList.next;
        }
        System.out.println("null");
    }
}


https://leetcode.com/problems/reverse-nodes-in-k-group/
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]


class LinkedList {
    Node head; // head of list
  
    /* Linked list Node*/
    class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
  
    Node reverse(Node head, int k)
    {
        if(head == null)
          return null;
        Node current = head;
        Node next = null;
        Node prev = null;
  
        int count = 0;
  
        /* Reverse first k nodes of linked list */
        while (count < k && current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }
  
        /* next is now a pointer to (k+1)th node
           Recursively call for the list starting from
           current. And make rest of the list as next of
           first node */
        if (next != null)
            head.next = reverse(next, k);
  
        // prev is now head of input list
        return prev;
    }
  
    /* Utility functions */
  
    /* Inserts a new Node at front of the list. */
    public void push(int new_data)
    {
        /* 1 & 2: Allocate the Node &
                  Put in the data*/
        Node new_node = new Node(new_data);
  
        /* 3. Make next of new Node as head */
        new_node.next = head;
  
        /* 4. Move the head to point to new Node */
        head = new_node;
    }
  
    /* Function to print linked list */
    void printList()
    {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
  
    /* Driver program to test above functions */
    public static void main(String args[])
    {
        LinkedList llist = new LinkedList();
  
        /* Constructed Linked List is 1->2->3->4->5->6->
           7->8->8->9->null */
        llist.push(9);
        llist.push(8);
        llist.push(7);
        llist.push(6);
        llist.push(5);
        llist.push(4);
        llist.push(3);
        llist.push(2);
        llist.push(1);
  
        System.out.println("Given Linked List");
        llist.printList();
  
        llist.head = llist.reverse(llist.head, 3);
  
        System.out.println("Reversed list");
        llist.printList();
    }
}
/* This code is contributed by Rajat Mishra */
Output
Given linked list 
1 2 3 4 5 6 7 8 9 
Reversed Linked list 
3 2 1 6 5 4 9 8 7 

Binary Search
Problem:
Given a sorted array nums and a target, return the index of the target element using binary search.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
using namespace std;

int binarySearch(vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return -1;
}

int main() {
    vector<int> nums = {-1, 0, 3, 5, 9, 12};
    int target = 9;
    cout << "Index of target: " << binarySearch(nums, target) << endl;
    return 0;
}
Time Complexity: O(log n)

Search in a 2D Matrix
Problem:
Given a 2D matrix where each row is sorted, return true if the target exists in the matrix, otherwise return false.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
using namespace std;

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int m = matrix.size(), n = matrix[0].size();
    int left = 0, right = m * n - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        int midValue = matrix[mid / n][mid % n];

        if (midValue == target) {
            return true;
        } else if (midValue < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return false;
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 5, 7},
        {10, 11, 16, 20},
        {23, 30, 34, 60}
    };
    int target = 3;
    cout << "Target found: " << (searchMatrix(matrix, target) ? "Yes" : "No") << endl;
    return 0;
}
Time Complexity: O(log(m * n))

Koko Eating Bananas
Problem:
Given an array of piles, and an integer H representing the maximum hours, determine the minimum speed K at which Koko must eat bananas to finish all piles within H hours.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool canEatAll(const vector<int>& piles, int k, int H) {
    int hours = 0;
    for (int pile : piles) {
        hours += (pile + k - 1) / k;  // ceil division
    }
    return hours <= H;
}

int minEatingSpeed(const vector<int>& piles, int H) {
    int left = 1, right = *max_element(piles.begin(), piles.end());

    while (left < right) {
        int mid = left + (right - left) / 2;
        if (canEatAll(piles, mid, H)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }

    return left;
}

int main() {
    vector<int> piles = {3, 6, 7, 11};
    int H = 8;
    cout << "Minimum eating speed: " << minEatingSpeed(piles, H) << endl;
    return 0;
}
Time Complexity: O(n log m), where n is the number of piles and m is the maximum pile size.

Find Minimum in Rotated Sorted Array
Problem:
Find the minimum element in a rotated sorted array.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
using namespace std;

int findMin(vector<int>& nums) {
    int left = 0, right = nums.size() - 1;
    
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] > nums[right]) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    
    return nums[left];
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    cout << "Minimum element: " << findMin(nums) << endl;
    return 0;
}
Time Complexity: O(log n)

Search in Rotated Sorted Array
Problem:
Given a rotated sorted array, search for a target value.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
using namespace std;

int search(vector<int>& nums, int target) {
    int left = 0, right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (nums[mid] == target) return mid;
        
        if (nums[left] <= nums[mid]) {
            if (target >= nums[left] && target < nums[mid]) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else {
            if (target > nums[mid] && target <= nums[right]) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
    }

    return -1;
}

int main() {
    vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
    int target = 0;
    cout << "Target index: " << search(nums, target) << endl;
    return 0;
}
Time Complexity: O(log n)

Median of Two Sorted Arrays
Problem:
Find the median of two sorted arrays.

C++ Code:
cpp
Copy code
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    if (nums1.size() > nums2.size()) swap(nums1, nums2);

    int m = nums1.size(), n = nums2.size();
    int left = 0, right = m;
    int halfLen = (m + n + 1) / 2;
    
    while (left <= right) {
        int partition1 = left + (right - left) / 2;
        int partition2 = halfLen - partition1;

        int maxLeft1 = (partition1 == 0) ? INT_MIN : nums1[partition1 - 1];
        int minRight1 = (partition1 == m) ? INT_MAX : nums1[partition1];
        int maxLeft2 = (partition2 == 0) ? INT_MIN : nums2[partition2 - 1];
        int minRight2 = (partition2 == n) ? INT_MAX : nums2[partition2];

        if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
            if ((m + n) % 2 == 0) {
                return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2.0;
            } else {
                return max(maxLeft1, maxLeft2);
            }
        } else if (maxLeft1 > minRight2) {
            right = partition1 - 1;
        } else {
            left = partition1 + 1;
        }
    }
    
    throw invalid_argument("Input arrays are not sorted.");
}

int main() {
    vector<int> nums1 = {1, 3};
    vector<int> nums2 = {2};
    cout << "Median: " << findMedianSortedArrays(nums1, nums2) << endl;

    vector<int> nums3 = {1, 2};
    vector<int> nums4 = {3, 4};
    cout << "Median: " << findMedianSortedArrays(nums3, nums4) << endl;
    return 0;
}
Time Complexity: O(log(min(m, n)))


or

#include <iostream>
#include <vector>
using namespace std;

// Function to calculate median
int getMedian(const vector<int>& ar1, const vector<int>& ar2) {
    int n = ar1.size();
    int m = ar2.size();
    int i = 0; // Current index of input vector ar1
    int j = 0; // Current index of input vector ar2
    int count;
    int m1 = -1, m2 = -1;

    // If (n + m) is odd, the middle index is the median
    if ((m + n) % 2 == 1) {
        for (count = 0; count <= (n + m) / 2; count++) {
            if (i != n && j != m) {
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++];
            } else if (i < n) {
                m1 = ar1[i++];
            } else {
                m1 = ar2[j++];
            }
        }
        return m1;
    } 
    // If (n + m) is even, the median is the average of two middle elements
    else {
        for (count = 0; count <= (n + m) / 2; count++) {
            m2 = m1;
            if (i != n && j != m) {
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++];
            } else if (i < n) {
                m1 = ar1[i++];
            } else {
                m1 = ar2[j++];
            }
        }
        return (m1 + m2) / 2;
    }
}

// Driver code
int main() {
    vector<int> ar1 = {900};
    vector<int> ar2 = {5, 8, 10, 20};

    cout << getMedian(ar1, ar2) << endl;

    return 0;
}

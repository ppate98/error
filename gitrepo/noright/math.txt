https://leetcode.com/problems/rotate-image/
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        
        // Step 1: Transpose the matrix
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        
        // Step 2: Reverse each row
        for (int i = 0; i < n; i++) {
            int left = 0;
            int right = n - 1;
            
            while (left < right) {
                int temp = matrix[i][left];
                matrix[i][left] = matrix[i][right];
                matrix[i][right] = temp;
                
                left++;
                right--;
            }
        }
    }
}

https://leetcode.com/problems/spiral-matrix/import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return result;
        }
        
        int rowStart = 0;
        int rowEnd = matrix.length - 1;
        int colStart = 0;
        int colEnd = matrix[0].length - 1;
        
        while (rowStart <= rowEnd && colStart <= colEnd) {
            // Traverse top row
            for (int col = colStart; col <= colEnd; col++) {
                result.add(matrix[rowStart][col]);
            }
            rowStart++;
            
            // Traverse right column
            for (int row = rowStart; row <= rowEnd; row++) {
                result.add(matrix[row][colEnd]);
            }
            colEnd--;
            
            if (rowStart > rowEnd || colStart > colEnd) {
                break;
            }
            
            // Traverse bottom row
            for (int col = colEnd; col >= colStart; col--) {
                result.add(matrix[rowEnd][col]);
            }
            rowEnd--;
            
            // Traverse left column
            for (int row = rowEnd; row >= rowStart; row--) {
                result.add(matrix[row][colStart]);
            }
            colStart++;
        }
        
        return result;
    }
}

https://leetcode.com/problems/set-matrix-zeroes/

class Solution {
    public void setZeroes(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        Set<Integer> zeroRows = new HashSet<>();
        Set<Integer> zeroCols = new HashSet<>();
        
        // Step 1: Find the rows and columns with zeroes
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 0) {
                    zeroRows.add(i);
                    zeroCols.add(j);
                }
            }
        }
        
        // Step 2: Set the zeroes
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (zeroRows.contains(i) || zeroCols.contains(j)) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}


https://leetcode.com/problems/happy-number/
class Solution {
    public boolean isHappy(int n) {
        Set<Integer> seen = new HashSet<>();
        
        while (n != 1 && !seen.contains(n)) {
            seen.add(n);
            n = getDigitSquareSum(n);
        }
        
        return n == 1;
    }
    
    private int getDigitSquareSum(int n) {
        int sum = 0;
        
        while (n > 0) {
            int digit = n % 10;
            sum += digit * digit;
            n /= 10;
        }
        
        return sum;
    }
}

https://leetcode.com/problems/plus-one/

class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        
        for (int i = n - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            
            digits[i] = 0;
        }
        
        int[] result = new int[n + 1];
        result[0] = 1;
        
        return result;
    }
}


https://leetcode.com/problems/powx-n/

class Solution {
    public double myPow(double x, int n) {
        if (n == 0) {
            return 1;
        }
        
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        
        double result = 1;
        
        while (n > 0) {
            if (n % 2 != 0) {
                result *= x;
            }
            
            x *= x;
            n /= 2;
        }
        
        return result;
    }
}


https://leetcode.com/problems/multiply-strings/

class Solution {
    public String multiply(String num1, String num2) {
        int n1 = num1.length();
        int n2 = num2.length();
        
        int[] result = new int[n1 + n2];
        
        for (int i = n1 - 1; i >= 0; i--) {
            for (int j = n2 - 1; j >= 0; j--) {
                int digit1 = num1.charAt(i) - '0';
                int digit2 = num2.charAt(j) - '0';
                
                int product = digit1 * digit2;
                int sum = result[i + j + 1] + product;
                
                result[i + j + 1] = sum % 10;
                result[i + j] += sum / 10;
            }
        }
        
        StringBuilder sb = new StringBuilder();
        
        for (int digit : result) {
            sb.append(digit);
        }
        
        while (sb.length() > 0 && sb.charAt(0) == '0') {
            sb.deleteCharAt(0);
        }
        
        if (sb.length() == 0) {
            return "0";
        }
        
        return sb.toString();
    }
}


https://leetcode.com/problems/detect-squares/

class DetectSquares {
    private Map<Integer, Map<Integer, Integer>> points;

    public DetectSquares() {
        points = new HashMap<>();
    }

    public void add(int[] point) {
        int x = point[0];
        int y = point[1];

        points.putIfAbsent(x, new HashMap<>());
        points.get(x).put(y, points.get(x).getOrDefault(y, 0) + 1);
    }

    public int count(int[] point) {
        int x1 = point[0];
        int y1 = point[1];

        int count = 0;

        for (int x2 : points.keySet()) {
            if (x2 == x1) continue;

            int distance = Math.abs(x2 - x1);

            for (int y2 : points.get(x2).keySet()) {
                if (Math.abs(y2 - y1) == distance) {
                    int y3 = y1 + distance;
                    int y4 = y2 + distance;

                    if (points.get(x1).containsKey(y3) && points.get(x1).containsKey(y4)) {
                        int freq1 = points.get(x2).get(y2);
                        int freq2 = points.get(x1).get(y3);
                        int freq3 = points.get(x1).get(y4);

                        count += freq1 * freq2 * freq3;
                    }
                }
            }
        }

        return count;
    }
}

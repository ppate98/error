https://leetcode.com/problems/single-number/
class Solution {
    public int singleNumber(int[] nums) {
        int result = 0;
        for (int num : nums) {
            result ^= num;
        }
        return result;
    }
}

https://leetcode.com/problems/number-of-1-bits/

public class Solution {
    public int hammingWeight(int n) {
        int count = 0;
        while (n != 0) {
            count++;
            n = n & (n - 1);
        }
        return count;
    }
}


https://leetcode.com/problems/counting-bits/

class Solution {
    public int[] countBits(int num) {
        int[] bitsCount = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            bitsCount[i] = bitsCount[i >> 1] + (i & 1);
        }
        return bitsCount;
    }
}


https://leetcode.com/problems/reverse-bits/

public class Solution {
    public int reverseBits(int n) {
        int reversedBits = 0;
        int bitLength = 32;
        
        for (int i = 0; i < bitLength; i++) {
            reversedBits <<= 1; // Left shift reversedBits to make space for the next bit
            reversedBits |= (n & 1); // Set the least significant bit of reversedBits to the current bit of n
            n >>= 1; // Right shift n to get the next bit
        }
        
        return reversedBits;
    }
}


https://leetcode.com/problems/missing-number/

public class Solution {
    public int missingNumber(int[] nums) {
        int missing = nums.length;
        for (int i = 0; i < nums.length; i++) {
            missing ^= i ^ nums[i];
        }
        return missing;
    }
}


https://leetcode.com/problems/sum-of-two-integers/
public class Solution {
    public int getSum(int a, int b) {
        while (b != 0) {
            int carry = (a & b) << 1;
            a = a ^ b;
            b = carry;
        }
        return a;
    }
}

https://leetcode.com/problems/reverse-integer/


public class Solution {
    public int reverse(int x) {
        int reversed = 0;

        while (x != 0) {
            int digit = x % 10;
            int newResult = reversed * 10 + digit;

            // Check for overflow
            if ((newResult - digit) / 10 != reversed) {
                return 0;
            }

            reversed = newResult;
            x /= 10;
        }

        return reversed;
    }
}

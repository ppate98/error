BinarySearch

https://leetcode.com/problems/binary-search/
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4


public class BinarySearch {
    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        int[] nums = {-1, 0, 3, 5, 9, 12};
        int target = 9;
        int index = search(nums, target);

        System.out.println("Target: " + target);
        System.out.println("Index: " + index);
    }
}


https://leetcode.com/problems/search-a-2d-matrix/


public class Search2DMatrix {
    public static boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;

        int left = 0;
        int right = m * n - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midValue = matrix[mid / n][mid % n];

            if (midValue == target) {
                return true;
            } else if (midValue < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[][] matrix = {
            {1, 3, 5, 7},
            {10, 11, 16, 20},
            {23, 30, 34, 60}
        };
        int target = 3;

        boolean found = searchMatrix(matrix, target);
        System.out.println("Target found: " + found);
    }
}


https://leetcode.com/problems/koko-eating-bananas/    no

Input: piles = [3,6,7,11], h = 8
Output: 4

public class KokoEatingBananas {
    public static int minEatingSpeed(int[] piles, int H) {
        int left = 1;
        int right = getMaxPile(piles);

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (canEatAll(piles, mid, H)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }

    private static boolean canEatAll(int[] piles, int k, int H) {
        int hours = 0;
        for (int pile : piles) {
            hours += (pile + k - 1) / k; // ceil division
        }
        return hours <= H;
    }

    private static int getMaxPile(int[] piles) {
        int maxPile = Integer.MIN_VALUE;
        for (int pile : piles) {
            maxPile = Math.max(maxPile, pile);
        }
        return maxPile;
    }

    public static void main(String[] args) {
        int[] piles = {3, 6, 7, 11};
        int H = 8;

        int minK = minEatingSpeed(piles, H);
        System.out.println("Minimum eating speed: " + minK);
    }
}

In this program, the minEatingSpeed method takes an array of integer piles, representing the number of bananas in each pile, and an integer H, representing the maximum number of hours Koko can spend eating bananas. It returns the minimum eating speed Koko needs to eat all the bananas within H hours.

Here's a breakdown of the implementation:

We initialize two pointers, left and right. left is set to 1 (minimum possible eating speed), and right is set to the maximum pile size in piles using the getMaxPile helper method.
We enter a while loop that continues as long as left is less than right.
Inside the loop, we calculate the middle value mid using the formula mid = left + (right - left) / 2. This ensures that the middle value is rounded down to the nearest integer.
We check if Koko can eat all the bananas within H hours at the eating speed mid using the canEatAll helper method:
We iterate through each pile in piles and calculate the number of hours required to eat that pile by performing a ceil division (pile + k - 1) / k. This ensures that any remainder results in an additional hour.
We sum up the total hours required.
If the total hours required is less than or equal to H, it means Koko can eat all the bananas within H hours, so we update right to mid.
Otherwise, if the total hours required is greater than H, it means Koko cannot eat all the bananas within H hours, so we update left to mid + 1.
After the loop exits, left will be equal to right, and it represents the minimum eating speed required for Koko to eat all the bananas within H hours.
In the main method, I provided an example usage where the piles array and H value are given. The program calculates the minimum eating speed using binary search and prints


https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

public class FindMinimumInRotatedSortedArray {
    public static int findMin(int[] nums) {
        int left = 0;
        int right = nums.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return nums[left];
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int min = findMin(nums);
        System.out.println("Minimum element: " + min);
    }
}


https://leetcode.com/problems/search-in-rotated-sorted-array/

public class SearchRotatedSortedArray {
    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[left] <= nums[mid]) {
                if (target >= nums[left] && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;

        int index = search(nums, target);
        System.out.println("Target index: " + index);
    }
}


https://leetcode.com/problems/time-based-key-value-store/ no

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class TimeMap {
    private Map<String, List<Data>> map;

    public TimeMap() {
        map = new HashMap<>();
    }

    public void set(String key, String value, int timestamp) {
        if (!map.containsKey(key)) {
            map.put(key, new ArrayList<>());
        }
        List<Data> list = map.get(key);
        list.add(new Data(timestamp, value));
    }

    public String get(String key, int timestamp) {
        if (!map.containsKey(key)) {
            return "";
        }
        List<Data> list = map.get(key);
        int index = binarySearch(list, timestamp);
        if (index < 0) {
            return "";
        }
        return list.get(index).value;
    }

    private int binarySearch(List<Data> list, int target) {
        int left = 0;
        int right = list.size() - 1;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midTimestamp = list.get(mid).timestamp;

            if (midTimestamp <= target) {
                result = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return result;
    }

    private class Data {
        int timestamp;
        String value;

        public Data(int timestamp, String value) {
            this.timestamp = timestamp;
            this.value = value;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        TimeMap timeMap = new TimeMap();
        timeMap.set("foo", "bar", 1);
        System.out.println(timeMap.get("foo", 1));  // Output: "bar"
        System.out.println(timeMap.get("foo", 3));  // Output: "bar"
        timeMap.set("foo", "bar2", 4);
        System.out.println(timeMap.get("foo", 4));  // Output: "bar2"
        System.out.println(timeMap.get("foo", 5));  // Output: "bar2"
    }
}



Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"


https://leetcode.com/problems/median-of-two-sorted-arrays/
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;

        // Ensure that nums1 is the smaller array
        if (m > n) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
            int tempLen = m;
            m = n;
            n = tempLen;
        }

        int left = 0;
        int right = m;
        int halfLen = (m + n + 1) / 2;

        while (left <= right) {
            int partitionNums1 = (left + right) / 2;
            int partitionNums2 = halfLen - partitionNums1;

            int maxLeftNums1 = (partitionNums1 == 0) ? Integer.MIN_VALUE : nums1[partitionNums1 - 1];
            int minRightNums1 = (partitionNums1 == m) ? Integer.MAX_VALUE : nums1[partitionNums1];
            int maxLeftNums2 = (partitionNums2 == 0) ? Integer.MIN_VALUE : nums2[partitionNums2 - 1];
            int minRightNums2 = (partitionNums2 == n) ? Integer.MAX_VALUE : nums2[partitionNums2];

            if (maxLeftNums1 <= minRightNums2 && maxLeftNums2 <= minRightNums1) {
                if ((m + n) % 2 == 0) {
                    return (Math.max(maxLeftNums1, maxLeftNums2) + Math.min(minRightNums1, minRightNums2)) / 2.0;
                } else {
                    return Math.max(maxLeftNums1, maxLeftNums2);
                }
            } else if (maxLeftNums1 > minRightNums2) {
                right = partitionNums1 - 1;
            } else {
                left = partitionNums1 + 1;
            }
        }
		
	
        throw new IllegalArgumentException("Input arrays are not sorted.");
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = {1, 3};
        int[] nums2 = {2};
        System.out.println(solution.findMedianSortedArrays(nums1, nums2));  // Output: 2.0

        int[] nums3 = {1, 2};
        int[] nums4 = {3, 4};
        System.out.println(solution.findMedianSortedArrays(nums3, nums4));  // Output: 2.5
    }
}



or


// A Simple Merge based O(n) solution
// to find median of two sorted arrays
 
import java.io.*;
 
class GFG {
 
    // Function to calculate median
    static int getMedian(int ar1[], int ar2[], int n, int m)
    {
 
        // Current index of input array ar1[]
        int i = 0;
 
        // Current index of input array ar2[]
        int j = 0;
        int count;
        int m1 = -1, m2 = -1;
 
        // Since there are (n+m) elements,
        // There are following two cases
        // if n+m is odd then the middle
        // index is median i.e. (m+n)/2
        if ((m + n) % 2 == 1) {
            for (count = 0; count <= (n + m) / 2; count++) {
                if (i != n && j != m) {
                    m1 = (ar1[i] > ar2[j]) ? ar2[j++]
                                           : ar1[i++];
                }
                else if (i < n) {
                    m1 = ar1[i++];
                }
 
                // for case when j<m,
                else {
                    m1 = ar2[j++];
                }
            }
            return m1;
        }
 
        // median will be average of elements
        // at index ((m+n)/2 - 1) and (m+n)/2
        // in the array obtained after merging
        // ar1 and ar2
        else {
            for (count = 0; count <= (n + m) / 2; count++) {
                m2 = m1;
                if (i != n && j != m) {
                    m1 = (ar1[i] > ar2[j]) ? ar2[j++]
                                           : ar1[i++];
                }
                else if (i < n) {
                    m1 = ar1[i++];
                }
 
                // for case when j<m,
                else {
                    m1 = ar2[j++];
                }
            }
            return (m1 + m2) / 2;
        }
    }
 
    // Driver code
    public static void main(String[] args)
    {
        int ar1[] = { 900 };
        int ar2[] = { 5, 8, 10, 20 };
 
        int n1 = ar1.length;
        int n2 = ar2.length;
 
        System.out.println(getMedian(ar1, ar2, n1, n2));
    }
}





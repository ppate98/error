Stack
https://leetcode.com/problems/valid-parentheses/
Input: s = "()[]{}"
Output: true

public class ValidParentheses {
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for (char ch : s.toCharArray()) {
            if (ch == '(' || ch == '{' || ch == '[') {
                stack.push(ch);
            } else if (ch == ')' || ch == '}' || ch == ']') {
                if (stack.isEmpty()) {
                    return false; // No matching opening bracket
                }

                char top = stack.pop();
                if ((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) {
                    return false; // Mismatched closing bracket
                }
            }
        }

        return stack.isEmpty(); // Stack should be empty for valid parentheses
    }

    public static void main(String[] args) {
        String input1 = "(){}[]";
        System.out.println(input1 + " is valid: " + isValid(input1));

        String input2 = "([)]";
        System.out.println(input2 + " is valid: " + isValid(input2));

        String input3 = "{[]}";
        System.out.println(input3 + " is valid: " + isValid(input3));
    }
}


https://leetcode.com/problems/min-stack/
in constant time

import java.util.Stack;

public class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    public void push(int x) {
        stack.push(x);
        if (minStack.isEmpty() || x <= minStack.peek()) {
            minStack.push(x);
        }
    }

    public void pop() {
        if (stack.peek().equals(minStack.peek())) {
            minStack.pop();
        }
        stack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }

    public static void main(String[] args) {
        MinStack minStack = new MinStack();
        minStack.push(-2);
        minStack.push(0);
        minStack.push(-3);
        System.out.println(minStack.getMin()); // Output: -3
        minStack.pop();
        System.out.println(minStack.top()); // Output: 0
        System.out.println(minStack.getMin()); // Output: -2
    }
}

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2



https://leetcode.com/problems/evaluate-reverse-polish-notation/
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

import java.util.Stack;

public class EvaluateReversePolishNotation {
    public static int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();

        for (String token : tokens) {
            if (isOperator(token)) {
                int operand2 = stack.pop();
                int operand1 = stack.pop();
                int result = performOperation(token, operand1, operand2);
                stack.push(result);
            } else {
                int number = Integer.parseInt(token);
                stack.push(number);
            }
        }

        return stack.pop();
    }

    private static boolean isOperator(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/");
    }

    private static int performOperation(String operator, int operand1, int operand2) {
        switch (operator) {
            case "+":
                return operand1 + operand2;
            case "-":
                return operand1 - operand2;
            case "*":
                return operand1 * operand2;
            case "/":
                return operand1 / operand2;
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }

    public static void main(String[] args) {
        String[] tokens1 = {"2", "1", "+", "3", "*"};
        System.out.println("Result: " + evalRPN(tokens1)); // Output: 9

        String[] tokens2 = {"4", "13", "5", "/", "+"};
        System.out.println("Result: " + evalRPN(tokens2)); // Output: 6

        String[] tokens3 = {"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"};
        System.out.println("Result: " + evalRPN(tokens3)); // Output: 22
    }
}



https://leetcode.com/problems/generate-parentheses/
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]


import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class GenerateParentheses {
    public static List<String> generateParentheses(int n) {
        List<String> result = new ArrayList<>();
        generate(result, new Stack<>(), "", 0, 0, n);
        return result;
    }

    private static void generate(List<String> result, Stack<Character> stack, String current, int open, int close, int n) {
        if (current.length() == n * 2) {
            result.add(current);
            return;
        }

        if (open < n) {
            stack.push('(');
            generate(result, stack, current + "(", open + 1, close, n);
            stack.pop();
        }

        if (close < open && !stack.isEmpty()) {
            stack.pop();
            generate(result, stack, current + ")", open, close + 1, n);
            stack.push('(');
        }
    }

    public static void main(String[] args) {
        int n = 3;
        List<String> parentheses = generateParentheses(n);
        System.out.println("Generated Parentheses for n = " + n + ":");
        for (String p : parentheses) {
            System.out.println(p);
        }
    }
}


https://leetcode.com/problems/daily-temperatures/
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]

import java.util.Stack;

public class DailyTemperatures {
    public static int[] dailyTemperatures(int[] temperatures) {
        int[] result = new int[temperatures.length];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < temperatures.length; i++) {
            while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {
                int prevIndex = stack.pop();
                result[prevIndex] = i - prevIndex;
            }
            stack.push(i);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] temperatures = {73, 74, 75, 71, 69, 72, 76, 73};
        int[] result = dailyTemperatures(temperatures);

        System.out.println("Daily Temperatures:");
        for (int i = 0; i < result.length; i++) {
            System.out.println("Temperature at index " + i + ": " + temperatures[i] + ", Days until a warmer temperature: " + result[i]);
        }
    }
}


https://leetcode.com/problems/car-fleet/

Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Note that no other cars meet these fleets before the destination, so the answer is 3.

import java.util.Arrays;
import java.util.Stack;

public class CarFleet {
    public static int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        if (n == 0) {
            return 0;
        }

        Car[] cars = new Car[n];
        for (int i = 0; i < n; i++) {
            cars[i] = new Car(position[i], (double) (target - position[i]) / speed[i]);
        }

        Arrays.sort(cars, (a, b) -> Integer.compare(b.position, a.position));

        Stack<Double> stack = new Stack<>();
        stack.push(cars[0].timeToReach);

        for (int i = 1; i < n; i++) {
            if (cars[i].timeToReach > stack.peek()) {
                stack.push(cars[i].timeToReach);
            }
        }

        return stack.size();
    }

    static class Car {
        int position;
        double timeToReach;

        Car(int position, double timeToReach) {
            this.position = position;
            this.timeToReach = timeToReach;
        }
    }

    public static void main(String[] args) {
        int target = 12;
        int[] position = {10, 8, 0, 5, 3};
        int[] speed = {2, 4, 1, 1, 3};

        int fleetCount = carFleet(target, position, speed);
        System.out.println("Number of Car Fleets: " + fleetCount);
    }
}

In this program, the carFleet method takes the target position, an array of car positions, and an array of car speeds. It returns the number of car fleets that will arrive at the target position.

Here's a breakdown of the implementation:

We create a class called Car to store each car's position and the time it takes to reach the target position.
We initialize an array of Car objects based on the given positions and speeds.
We sort the cars array in descending order of positions. This is because the cars with higher positions will reach the target last.
We use a stack to store the maximum time to reach the target for each car fleet.
We push the first car's time to reach the target onto the stack.
For each subsequent car, if its time to reach the target is greater than the maximum time on the stack, we push it onto the stack.
After iterating through all the cars, the number of car fleets is the size of the stack.
In the main method, I provided an example usage where the target position, positions array, and speeds array are given. The number of car fleets is printed for verification. Feel free to modify the example or add more test cases to further validate the implementation.



https://leetcode.com/problems/largest-rectangle-in-histogram/
Input: heights = [2,4]
Output: 4


import java.util.Stack;

public class LargestRectangleInHistogram {
    public static int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] leftBoundaries = new int[n];
        int[] rightBoundaries = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Calculate left boundaries
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[i] <= heights[stack.peek()]) {
                stack.pop();
            }
            leftBoundaries[i] = stack.isEmpty() ? 0 : stack.peek() + 1;
            stack.push(i);
        }

        stack.clear();

        // Calculate right boundaries
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[i] <= heights[stack.peek()]) {
                stack.pop();
            }
            rightBoundaries[i] = stack.isEmpty() ? n - 1 : stack.peek() - 1;
            stack.push(i);
        }

        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int area = heights[i] * (rightBoundaries[i] - leftBoundaries[i] + 1);
            maxArea = Math.max(maxArea, area);
        }

        return maxArea;
    }

    public static void main(String[] args) {
        int[] heights = {2, 1, 5, 6, 2, 3};
        int maxArea = largestRectangleArea(heights);
        System.out.println("Largest Rectangle Area: " + maxArea);
    }
}


In this program, the largestRectangleArea method takes an array of integer heights representing the histogram's bar heights. It returns the largest rectangle area that can be formed within the histogram.

Here's a breakdown of the implementation:

We create two arrays: leftBoundaries and rightBoundaries, which will store the left and right boundaries for each bar in the histogram.
We use a stack to help us find the left and right boundaries efficiently.
First, we calculate the left boundaries. We iterate through the heights array from left to right:
For each bar, we keep popping the stack until we find a bar with a smaller height. This ensures that the stack contains the indices of bars in non-decreasing order of heights.
The left boundary of the current bar is the index of the top element on the stack (if the stack is empty, the left boundary is 0).
We push the current index onto the stack.
Next, we calculate the right boundaries. We iterate through the heights array from right to left:
Similar to the previous step, we keep popping the stack until we find a bar with a smaller height.
The right boundary of the current bar is the index of the top element on the stack (if the stack is empty, the right boundary is n - 1, where n is the length of the heights array).
We push the current index onto the stack.
After calculating the left and right boundaries, we iterate through the heights array again to calculate the area of each possible rectangle:
The area is given by the height of the current bar multiplied by the width, which is (rightBoundary - leftBoundary + 1).
We update the maxArea variable with the maximum area encountered so far.
Finally, we return the maxArea.
https://leetcode.com/problems/unique-paths/
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        
        // Fill the first row with 1s
        for (int i = 0; i < n; i++) {
            dp[0][i] = 1;
        }
        
        // Fill the first column with 1s
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        
        // Fill the rest of the grid
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        return dp[m - 1][n - 1];
    }
}


https://leetcode.com/problems/longest-common-subsequence/
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        
        int[][] dp = new int[m + 1][n + 1];
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[m][n];
    }
}


https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n <= 1) {
            return 0;
        }
        
        int[] buy = new int[n];  // Maximum profit when buying on day i
        int[] sell = new int[n]; // Maximum profit when selling on day i
        
        buy[0] = -prices[0]; // Buy the stock on the first day
        buy[1] = Math.max(-prices[0], -prices[1]); // Buy either on day 0 or day 1
        
        sell[0] = 0; // No selling on the first day
        
        for (int i = 1; i < n; i++) {
            int cooldown = (i >= 2) ? sell[i - 2] : 0; // Cooldown period
            
            // Calculate the maximum profit when buying or not buying on day i
            buy[i] = Math.max(buy[i - 1], cooldown - prices[i]);
            
            // Calculate the maximum profit when selling or not selling on day i
            sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);
        }
        
        return sell[n - 1]; // Maximum profit is the last element in the sell array
    }
}


https://leetcode.com/problems/coin-change-ii/

class Solution {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;

        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] += dp[i - coin];
            }
        }

        return dp[amount];
    }
}


https://leetcode.com/problems/target-sum/

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        
        // Check if the target is achievable based on the sum of nums
        if (target > sum || target < -sum) {
            return 0;
        }
        
        int n = nums.length;
        int[][] dp = new int[n + 1][2 * sum + 1];
        
        // Base case: one way to achieve a sum of 0 with no numbers
        dp[0][sum] = 1;
        
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= 2 * sum; j++) {
                if (j - nums[i - 1] >= 0) {
                    dp[i][j] += dp[i - 1][j - nums[i - 1]];
                }
                if (j + nums[i - 1] <= 2 * sum) {
                    dp[i][j] += dp[i - 1][j + nums[i - 1]];
                }
            }
        }
        
        return dp[n][sum + target];
    }
}


https://leetcode.com/problems/interleaving-string/

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int m = s1.length();
        int n = s2.length();
        
        // Check if the lengths of s1 and s2 sum up to the length of s3
        if (m + n != s3.length()) {
            return false;
        }
        
        boolean[][] dp = new boolean[m + 1][n + 1];
        
        // Base case: empty strings interleave to form an empty string
        dp[0][0] = true;
        
        // Initialize the first row: s1 matches s3
        for (int i = 1; i <= m; i++) {
            if (s1.charAt(i - 1) == s3.charAt(i - 1) && dp[i - 1][0]) {
                dp[i][0] = true;
            }
        }
        
        // Initialize the first column: s2 matches s3
        for (int j = 1; j <= n; j++) {
            if (s2.charAt(j - 1) == s3.charAt(j - 1) && dp[0][j - 1]) {
                dp[0][j] = true;
            }
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // Check if s1 matches s3
                if (s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j]) {
                    dp[i][j] = true;
                }
                // Check if s2 matches s3
                if (s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]) {
                    dp[i][j] = true;
                }
            }
        }
        
        return dp[m][n];
    }
}


https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

class Solution {
    private int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    private int[][] memo;

    public int longestIncreasingPath(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        memo = new int[rows][cols];
        
        int maxLength = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maxLength = Math.max(maxLength, dfs(matrix, i, j));
            }
        }
        
        return maxLength;
    }
    
    private int dfs(int[][] matrix, int i, int j) {
        if (memo[i][j] != 0) {
            return memo[i][j];
        }
        
        int maxLength = 1;
        for (int[] direction : directions) {
            int newRow = i + direction[0];
            int newCol = j + direction[1];
            
            if (newRow >= 0 && newRow < matrix.length && newCol >= 0 && newCol < matrix[0].length
                    && matrix[newRow][newCol] > matrix[i][j]) {
                maxLength = Math.max(maxLength, 1 + dfs(matrix, newRow, newCol));
            }
        }
        
        memo[i][j] = maxLength;
        return maxLength;
    }
}


https://leetcode.com/problems/distinct-subsequences/

class Solution {
    public int numDistinct(String s, String t) {
        int m = t.length();
        int n = s.length();
        
        // Create a 2D array to store the intermediate results
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the first column with 1s
        for (int i = 0; i <= m; i++) {
            dp[i][0] = 0;
        }
        
        // Initialize the first row with 1s
        for (int j = 0; j <= n; j++) {
            dp[0][j] = 1;
        }
        
        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (t.charAt(i - 1) == s.charAt(j - 1)) {
                    // If the characters match, we have two options:
                    // 1. Include the current character in both s and t, i.e., dp[i-1][j-1]
                    // 2. Skip the current character in s, i.e., dp[i][j-1]
                    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1];
                } else {
                    // If the characters don't match, we can only skip the current character in s
                    dp[i][j] = dp[i][j - 1];
                }
            }
        }
        
        return dp[m][n];
    }
}


https://leetcode.com/problems/edit-distance/
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        // Create a 2D array to store the intermediate results
        int[][] dp = new int[m + 1][n + 1];

        // Initialize the first row and the first column
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }

        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    // Characters match, no operation needed
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    // Choose the minimum of three operations: insert, delete, or substitute
                    dp[i][j] = 1 + Math.min(dp[i][j - 1], Math.min(dp[i - 1][j], dp[i - 1][j - 1]));
                }
            }
        }

        return dp[m][n];
    }
}


https://leetcode.com/problems/burst-balloons/

class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n + 2][n + 2];

        int[] newNums = new int[n + 2];
        newNums[0] = newNums[n + 1] = 1;
        for (int i = 1; i <= n; i++) {
            newNums[i] = nums[i - 1];
        }

        for (int len = 1; len <= n; len++) {
            for (int left = 1; left <= n - len + 1; left++) {
                int right = left + len - 1;
                for (int k = left; k <= right; k++) {
                    dp[left][right] = Math.max(dp[left][right],
                            dp[left][k - 1] + newNums[left - 1] * newNums[k] * newNums[right + 1] + dp[k + 1][right]);
                }
            }
        }

        return dp[1][n];
    }
}


https://leetcode.com/problems/regular-expression-matching/

class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        // Create a 2D array to store the intermediate results
        boolean[][] dp = new boolean[m + 1][n + 1];

        // Initialize the first cell as true since empty string matches empty pattern
        dp[0][0] = true;

        // Fill the first row
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }

        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j - 1) == '.' || p.charAt(j - 1) == s.charAt(i - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p.charAt(j - 1) == '*') {
                    // Zero occurrences of the preceding character
                    dp[i][j] = dp[i][j - 2];

                    // One or more occurrences of the preceding character
                    if (p.charAt(j - 2) == '.' || p.charAt(j - 2) == s.charAt(i - 1)) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            }
        }

        return dp[m][n];
    }
}

